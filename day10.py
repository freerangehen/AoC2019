from math import sqrt
from fractions import gcd
from numpy import sign
from math import atan2

from itertools import cycle


def direction_vector(x1, y1, x2, y2):
    """ e.g. -> 1 | 3 is the same as -> 2 | 6
    """
    dist = sqrt((x1 - x2)**2 + (y1 - y2)**2 )
    
    dir_x = x2 - x1
    dir_y = y2 - y1

    if dir_x == 0 or dir_y == 0:
        return sign(dir_x), sign(dir_y), dist
    else:
        base = gcd(abs(dir_x), abs(dir_y))

    dir_x = dir_x / base
    dir_y = dir_y / base

    return dir_x, dir_y, dist


def load_ast_locs(arr):
    asteroids = []
    for y_, each_row in enumerate(arr):
        for x_, each_item in enumerate(each_row):
            if each_item == '#':
                asteroids.append((x_, y_))
    return asteroids


def calc_max_sighting(asteroids): 
    # structure:
    #
    #     {(x, y): 
    #             {
    #                 (vec_1x, vec_1y): [(x1, y1), (x2, ,y2) ,...],
    #                 (vec_2x, vec_2y): [... ]
    #             }
    #     }
    # vec1x, vec_1y are vectors e.g. (0, 1), (0, 2), ... (0, 5) denoting an angle
    ast_map = {}
    max_sighting = 0
    mas_sighting_ast = None
    for each_ast in asteroids:
        ast_map[each_ast] = {}
        for other_ast in asteroids:
            if other_ast != each_ast:
                dir_x, dir_y, dist = direction_vector(each_ast[0], each_ast[1],
                                                      other_ast[0], other_ast[1])
                direction = (dir_x, dir_y)
                if direction not in ast_map[each_ast]:
                    ast_map[each_ast][direction] = [(dist, other_ast)]
                else:

                    ast_map[each_ast][direction].append((dist, other_ast))

        if len(ast_map[each_ast]) > max_sighting:
            max_sighting = len(ast_map[each_ast])
            max_sighting_ast = each_ast

    return max_sighting_ast, max_sighting, ast_map


if __name__ == "__main__":

# structure:
#
#     {(x, y): 
#             {
#                 (vec_1x, vec_1y): [(x1, y1), (x2, ,y2) ,...],
#                 (vec_2x, vec_2y): [... ]
#             }
#     }
# vec1x, vec_1y are vectors e.g. (0, 1), (0, 2), ... (0, 5) denoting an angle

    test_arr = \
        [['.', '#', '.', '.', '#'], 
         ['.', '.', '.', '.', '.'], 
         ['#', '#', '#', '#', '#'], 
         ['.', '.', '.', '.', '#'], 
         ['.', '.', '.', '#', '#']]
    asteroids = load_ast_locs(test_arr)

    max_sighting_ast, max_sightings, _ = calc_max_sighting(asteroids)
    assert max_sighting_ast == (3, 4)
    assert max_sightings == 8

    test_arr2 = [\
        ['.', '.', '.', '.', '.', '.', '#', '.', '#', '.'], 
        ['#', '.', '.', '#', '.', '#', '.', '.', '.', '.'], 
        ['.', '.', '#', '#', '#', '#', '#', '#', '#', '.'], 
        ['.', '#', '.', '#', '.', '#', '#', '#', '.', '.'], 
        ['.', '#', '.', '.', '#', '.', '.', '.', '.', '.'], 
        ['.', '.', '#', '.', '.', '.', '.', '#', '.', '#'], 
        ['#', '.', '.', '#', '.', '.', '.', '.', '#', '.'], 
        ['.', '#', '#', '.', '#', '.', '.', '#', '#', '#'], 
        ['#', '#', '.', '.', '.', '#', '.', '.', '#', '.'], 
        ['.', '#', '.', '.', '.', '.', '#', '#', '#', '#']] 
    asteroids2 = load_ast_locs(test_arr2)
    max_sighting_ast, max_sightings, _ = calc_max_sighting(asteroids2)
    assert max_sighting_ast == (5, 8)
    assert max_sightings == 33

    test_arr3 = [\
        ['.', '#', '.', '.', '#', '#', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#'], 
        ['#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#', '.'], 
        ['.', '#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'], 
        ['.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '.'], 
        ['#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '.', '#', '#', '.', '#', '#', '#', '.', '#', '#'], 
        ['.', '.', '#', '#', '#', '#', '#', '.', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
        ['#', '.', '#', '#', '#', '#', '.', '.', '.', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#'], 
        ['#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
        ['#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '.', '.', '#', '#', '#', '#', '.', '.'], 
        ['.', '.', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#'], 
        ['#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '.', '.', '.', '#', '#', '.', '.', '#'], 
        ['.', '#', '#', '#', '#', '#', '.', '.', '#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#'], 
        ['#', '#', '.', '.', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.'], 
        ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#'], 
        ['.', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#'], 
        ['.', '.', '.', '.', '#', '#', '.', '#', '#', '.', '#', '#', '#', '.', '.', '#', '#', '#', '#', '#'], 
        ['.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#'], 
        ['#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '#', '#'], 
        ['#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '.', '#', '#', '.', '#', '.', '.', '#', '#']]
    asteroids3 = load_ast_locs(test_arr3)
    max_sighting_ast, max_sightings, _ = calc_max_sighting(asteroids3)
    assert max_sighting_ast == (11, 13)
    assert max_sightings == 210

    arr_input = [\
        ['#', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '.'], 
        ['#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '#', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '#'], 
        ['#', '.', '#', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '.', '.', '.', '#', '#'], 
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '.', '#', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.'], 
        ['.', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '#', '.', '.', '#'], 
        ['.', '.', '#', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'], 
        ['.', '.', '.', '#', '#', '#', '.', '.', '#', '#', '.', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], 
        ['.', '#', '#', '.', '.', '.', '#', '#', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.', '#', '.'], 
        ['.', '.', '.', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'], 
        ['.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '#', '#', '.', '.', '.', '#', '#', '.', '.'], 
        ['.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#'], 
        ['.', '.', '.', '.', '#', '#', '#', '.', '.', '#', '.', '.', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '.', '#', '#', '#', '.', '.', '.', '#', '.', '#', '#'], 
        ['.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#'], 
        ['.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.'], 
        ['.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'], 
        ['.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.'], 
        ['.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '#', '.', '.', '#'], 
        ['#', '.', '.', '#', '.', '.', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '#', '.', '.', '#', '.', '.', '.'], 
        ['.', '.', '#', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '.', '.', '#', '.', '#', '.', '.', '#', '.'], 
        ['.', '#', '.', '#', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '#', '#'], 
        ['.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.'], 
        ['.', '#', '.', '.', '#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '#', '.', '.', '.', '.'], 
        ['.', '#', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.', '#', '.'], 
        ['#', '.', '.', '#', '.', '.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#'], 
        ['#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '#', '.', '#', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.'], 
        ['#', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#', '#', '#', '.', '.', '#', '#', '.', '#', '#', '.', '.', '.', '#', '#', '.'], 
        ['.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.'], 
        ['.', '.', '.', '.', '#', '#', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'], 
        ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.'], 
        ['.', '#', '.', '#', '#', '.', '#', '#', '.', '.', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.'], 
        ['.', '.', '#', '#', '#', '#', '.', '.', '.', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
        ['.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '.', '.', '#', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.'], 
        ['.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], 
        ['.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '#', '.', '#', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '#', '.']]
    asteroids = load_ast_locs(arr_input)
    max_sightings_ast, max_sightings, ast_map = calc_max_sighting(asteroids)
    print(max_sightings_ast)
    print(max_sightings) #(20, 20), 292

    # part II
    laser_map = ast_map[(20, 20)]
    rotate_map = {atan2(key[0], key[1]): sorted(val, key=lambda x: x[0]) 
                  for key, val in laser_map.items()}
    # sort by distance and angle
#     rotate_map = {}
#     for key, val in _rotate_map.items():
#         val.sort(key = lambda x: -x[0])
#         rotate_map.update({key: val})
    sorted_angles = sorted([angle for angle, asts in rotate_map.items()])

    # strt from zero
    start_idx = sorted_angles.index(0)
    sorted_angles = sorted_angles[start_idx:] + sorted_angles[:start_idx]
    import pdb; pdb.set_trace()
    sorted_angles = cycle(sorted_angles)
    blast_idx = 0

    while True:

        angle_of_fire = next(sorted_angles)
        if rotate_map[angle_of_fire]:
            dist_fired, asteroid_destroyed = rotate_map[angle_of_fire].pop()
            if blast_idx == 199:
                print(dist_fired)
                print(asteroid_destroyed)
                print(asteroid_destroyed[0] * 100 + asteroid_destroyed[1])
                break
            blast_idx += 1
            
